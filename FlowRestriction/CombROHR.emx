<?xml version="1.0" encoding="UTF-8"?>
<Document>
 <Icons>
    <Icon size="128" bpp="32" format="png">
<![CDATA[89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda793000000097048597300000ec400000ec401952b0e1b0000029549444154789ceddb418e9b3000405153cd3e7b2b52afd2a3f450b940739c9ca0cbae506fe15921a529c66606b099ffdf2e10628b7ccc084d86945210d7b7d613505b0600670070060067007006006700700600670070060067007006006700700600670070060067007006006700700600670070060067007006006700700600670070060067007006006700706fb91dc3307c0f21fc396e2a3ac8cf94d2afe9852b005c760578f6783cf69e877676bfdfc3ed76fb6f7b5500d7eb75f309e95897cb6576bbb7003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380abfab7f023c4184308218ce3f8cfebc9b4bd74fcabdc716bc7db7b3ead74b902cc9dbcdc098d3166f72d1d573b5eeef33f3a66cd7c8ed4cd0a3079bd329fb7c518b357d0dcf69ae34ae3cd7dfed2e7e68ea99dcfd1ba5c015e4fce9a2fafe6b835e38de3583d9fd27be6226aadbb00d65c19735fce9ee3959482dc7abc2d74770bd842ebababf5f86b7c8900ce74c27b73fa00e6befcd6f7dade96f925a70ea0e69eab65ddfd11b8a556b786d2b8a5671747fa1201ac7d50b3979a5b4f6fabd6a96f01e338ce3eb499dbdfcb9ca6f7f4e2f42b40e92150ee597f8b3995f6b5d0cd0a503a319f39a9a5a7725bcfa7667f2f4ebf02e8730c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e0aa7e17d0cbefd8b43d5700b8a515e06f08e1c741f3d0717e3fbf18524aad26a20e780b80330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803807b07176fb9e2c5dce70d0000000049454e44ae426082]]>
   </Icon>
</Icons>
 <Model version="4.5" build="4.5.4.6171">
    <Sidops>
<![CDATA[ROHR 968 576specifications active 'FixedShapeVarDurComb'	specification 'FixedShapeFixedDurComb'description '<Information> <Description>    <Version>4.5</Version>  <LibraryPath>FlowRestriction\CombROHR.emx</LibraryPath>  <TimeStamp>2015-11-14 17:37:19</TimeStamp><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>  <AllowLibraryUpdate>True</AllowLibraryUpdate>  <Configuration>   <struct>    <member>     <name>DocumentationMask</name>     <value>      <struct></struct>     </value>    </member>   </struct>  </Configuration> </Description></Information>'; type Submodel  ports   signal in pfi;   signal in x_lev;   signal in fiinj;   signal in omega;   power out pp;   power out pT;   power out pF;   signal out Comb_state; end; icon bg  figures   rectangle 332.5 280.9 387.4 311 fill 15132390;   text 'name' 360 296 16; end; implementation eqparameters	integer global nCyl;	integer global nStroke;	real global hn;//	real global fiinj;	real global mqf_max;	real global fs;	real global S, B, lambdaR, CR;// Englib	string global dll_ICE;//	string dll_fcn_rohr    = 'ice_rohr';//	string dll_icemax    = 'ice_pfimax';//	string hidden dll_fcn_ThDP = 'thdyn_CombGasZach'; // subroutines names in the dll file//	string dll_fcn_rohr = 		'ice_rohr2';	real global wiebe_para[9];variables	real phi;	real phi_comb;	real P, F, T;	real dmf;	real mqf;//	real inarr_ROHR[20], outarr_ROHR[13];	real fiig;//	real hidden inarr_pfimax[3], outarr_pfimax[2];//	real hidden inarr_ThermoProp[3], outarr_ThermoProp[13];//	real Pmax, Pmax_pfi;//	real bmepnom, omeganom;//	real eta_i, sfoc;//	real mfPC, mf, Oldmf, OldmfPC;	boolean reset;		real dphi_comb, igdel, dmf_nom;	real yp, ym, yl, yptomp, ymtomm, yltoml, df1dy, df2dy, df3dy;	initialequations	Comb_state = 0;	// 0: Start of new cycle / 1 : injection started / 2 : start of combustion / 5: end of combustion//	if fiinj > 180 then fiinj = fiinj - 360; end;		fiig = 0;	reset = true;	mqf = 0;	dmf = 0;	dphi_comb = wiebe_para[3] + wiebe_para[6];code	P=pp.e; F=pF.e; T=pT.e;	phi = pfi*180/pi mod 360;	if phi > 180 then 		phi_comb= phi - 360;  	else		phi_comb = phi;	end;	if phi_comb > fiinj and Comb_state == 0 then		Comb_state = 1;		mqf = mqf_max * x_lev;		igdel = 180/pi*omega*1e-3*0.0405*exp(5473/T)*(P*1e-5)^(-0.757);		if igdel > 30 then			Comb_state = 5;		end;		fiig = fiinj + igdel;		reset = false;			else if phi_comb > fiig and phi_comb < fiig + dphi_comb and Comb_state == 1 then				Comb_state = 2;				reset = true;			else	if phi_comb > fiig + dphi_comb and reset == true then						Comb_state = 5;						reset = false;					end;			end;	end;				if phi_comb > -20 and phi_comb < -15 then		Comb_state = 0;		reset = true;	end;				switch Comb_state		case 2 do			yp = max([(phi_comb - fiig) / wiebe_para[4];0]);			ym = max([0;(phi_comb - (fiig + wiebe_para[3]))/wiebe_para[5]]);			yl = max([0;(phi_comb - (fiig + wiebe_para[3]))/wiebe_para[6]]);			yptomp = yp^wiebe_para[7];			ymtomm = ym^wiebe_para[8];			yltoml = yl^wiebe_para[9];			df1dy = 6.9*(wiebe_para[7] + 1)*yptomp*exp(-6.9*yp*yptomp) / wiebe_para[4];			df2dy = 6.9*(wiebe_para[8] + 1)*ymtomm*exp(-6.9*ym*ymtomm) / wiebe_para[5];			df3dy = 6.9*(wiebe_para[9] + 1)*yltoml*exp(-6.9*yl*yltoml) / wiebe_para[6];			dmf_nom = wiebe_para[1]*df1dy + wiebe_para[2]*df2dy + (1-wiebe_para[1] - wiebe_para[2])*df3dy;			dmf = mqf*dmf_nom*omega*180/pi;		default do			dmf = 0;	end;		pp.f=dmf;	pF.f= dmf;	pT.f=dmf*hn;	/*	inarr_pfimax=[time; phi; P];	outarr_pfimax=dll(dll_ICE,dll_icemax, inarr_pfimax);	Pmax=outarr_pfimax[1];Pmax_pfi=outarr_pfimax[2];	p_max = [Pmax;Pmax_pfi];	*/implementation_end;specification_end;	specification 'FixedShapeVarDurComb' description '<Information>
 <Description>
    <Version>4.5</Version>
  <LibraryPath>FlowRestriction\CombROHR.emx</LibraryPath>
  <TimeStamp>2015-11-15 02:16:23</TimeStamp>
<IsMainModel>1</IsMainModel>
  <KeepParameterValues>False</KeepParameterValues>
  <AllowLibraryUpdate>True</AllowLibraryUpdate>
  <Configuration>
   <struct>
    <member>
     <name>DocumentationMask</name>
     <value>
      <struct></struct>
     </value>
    </member>
   </struct>
  </Configuration>
 </Description>
</Information>'; type Submodel  ports   signal in pfi;   signal in x_lev;   signal in fiinj;   signal in omega;   power out pp;   power out pT;   power out pF;   signal out Comb_state; end; icon bg bottom  figures   rectangle 940.5 561 995.5 591 fill 15132390;   text 'name' 968 576 16; end; implementation eqparameters	integer global nCyl;	integer global nStroke;	real global hn;//	real global fiinj;	real global mqf_max;	real global fs;	real global S, B, lambdaR, CR;// Englib	string global dll_ICE;//	string dll_fcn_rohr    = 'ice_rohr';//	string dll_icemax    = 'ice_pfimax';//	string hidden dll_fcn_ThDP = 'thdyn_CombGasZach'; // subroutines names in the dll file//	string dll_fcn_rohr = 		'ice_rohr2';	real global wiebe_para[9];variables	real phi;	real phi_comb;	real P, F, T;	real dmf;	real mqf;//	real inarr_ROHR[20], outarr_ROHR[13];	real fiig;//	real hidden inarr_pfimax[3], outarr_pfimax[2];//	real hidden inarr_ThermoProp[3], outarr_ThermoProp[13];//	real Pmax, Pmax_pfi;//	real bmepnom, omeganom;//	real eta_i, sfoc;//	real mfPC, mf, Oldmf, OldmfPC;	boolean reset;	real wiebe3Temp, wiebe4Temp, wiebe5Temp, wiebe6Temp;  // Wiebe parameters related to combustion duration		real dphi_comb, igdel, dmf_nom;	real yp, ym, yl, yptomp, ymtomm, yltoml, df1dy, df2dy, df3dy;	initialequations	Comb_state = 0;	// 0: Start of new cycle / 1 : injection started / 2 : start of combustion / 5: end of combustion//	if fiinj > 180 then fiinj = fiinj - 360; end;		fiig = 0;	reset = true;	mqf = 0;	dmf = 0;	wiebe3Temp = wiebe_para[3];	wiebe4Temp = wiebe_para[4];		wiebe5Temp = wiebe_para[5];	wiebe6Temp = wiebe_para[6];		dphi_comb = wiebe3Temp + wiebe6Temp;code	P=pp.e; F=pF.e; T=pT.e;	phi = pfi*180/pi mod 360;	if phi > 180 then 		phi_comb= phi - 360;  	else		phi_comb = phi;	end;	if phi_comb > fiinj and Comb_state == 0 then		Comb_state = 1;		mqf = mqf_max * x_lev;		igdel = 180/pi*omega*1e-3*0.0405*exp(5473/T)*(P*1e-5)^(-0.757);		// Vary combustion duration according to amount of injection		wiebe3Temp = 0.5*wiebe_para[3]*(1+x_lev);		wiebe4Temp = 0.5*wiebe_para[4]*(1+x_lev);		wiebe5Temp = 0.5*wiebe_para[5]*(1+x_lev);		wiebe6Temp = 0.5*wiebe_para[6]*(1+x_lev);		dphi_comb = wiebe3Temp + wiebe6Temp;		// For constant duration, use following		// dphi_comb = wiebe_para[3] + wiebe_para[6];				// **********************************************************				if igdel > 30 then			Comb_state = 5;		end;		fiig = fiinj + igdel;		reset = false;			else if phi_comb > fiig and phi_comb < fiig + dphi_comb and Comb_state == 1 then				Comb_state = 2;				reset = true;			else	if phi_comb > fiig + dphi_comb and reset == true then						Comb_state = 5;						reset = false;					end;			end;	end;				if phi_comb > -20 and phi_comb < -15 then		Comb_state = 0;		reset = true;	end;				switch Comb_state		case 2 do			yp = max([(phi_comb - fiig) / wiebe4Temp;0]);			ym = max([0;(phi_comb - (fiig + wiebe3Temp))/wiebe5Temp]);			yl = max([0;(phi_comb - (fiig + wiebe3Temp))/wiebe6Temp]);			yptomp = yp^wiebe_para[7];			ymtomm = ym^wiebe_para[8];			yltoml = yl^wiebe_para[9];			df1dy = 6.9*(wiebe_para[7] + 1)*yptomp*exp(-6.9*yp*yptomp) / wiebe4Temp;			df2dy = 6.9*(wiebe_para[8] + 1)*ymtomm*exp(-6.9*ym*ymtomm) / wiebe5Temp;			df3dy = 6.9*(wiebe_para[9] + 1)*yltoml*exp(-6.9*yl*yltoml) / wiebe6Temp;			dmf_nom = wiebe_para[1]*df1dy + wiebe_para[2]*df2dy + (1-wiebe_para[1] - wiebe_para[2])*df3dy;			dmf = mqf*dmf_nom*omega*180/pi;		default do			dmf = 0;	end;		pp.f=dmf;	pF.f= dmf;	pT.f=dmf*hn;	/*	inarr_pfimax=[time; phi; P];	outarr_pfimax=dll(dll_ICE,dll_icemax, inarr_pfimax);	Pmax=outarr_pfimax[1];Pmax_pfi=outarr_pfimax[2];	p_max = [Pmax;Pmax_pfi];	*/implementation_end;specification_end;end;]]>
  </Sidops>
</Model>
</Document>
