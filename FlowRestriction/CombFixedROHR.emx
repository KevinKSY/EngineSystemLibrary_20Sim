<?xml version="1.0" encoding="UTF-8"?>
<Document>
 <Icons>
  <Icon size="128" bpp="32" format="png"><![CDATA[89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda793000000097048597300000ec400000ec401952b0e1b0000028949444154789ceddd416e9b401840e1df6de5a5d75d75db4b70146fbaf3a9b2f2057c0736957d8756aef019ba9b6eea74d2300e440e6178ef9390e20921041e231ca16495520a717d78ef1dd0fb3200380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300ba94d29325221e2222b92c7359afd73ff2f3fd290a76bb5de953aad4e9748aaeeb3ee663c500b6dbeddbef9126d775dd93d7de03c019009c01c019009c01c019009c01c019009c01c019009c01c019009c01c019009c01c019009c01c019005cf191b039699a262222dab67dfcf8aa6ddbe2fab7d61bb2cd7b7daf39ab6a06e83bd8f958d334bdeb94be76ecf8ff6363b7394755cc00b9fcea2a1de8d2d53e749bf9ec30641b43d79ba3aa668097a6d6b66d474fbfa5f55fda4e5f24f9eb5a42a86e0618638a9350cb892e595c00b59f90a92d2a80a177f3f754d31d7f9f45057055fb499952553781aff15657ffadd9e5d6dbd1b959e40c30f5c1aff997418b9a01fa0e7afed6f0de61bcf62de49cacfefe4d807f03abd543447cabe987d030fbfd3e0e87c3afcbe5f2e53ab6a81940e319009c01c019009c01c019009c01c019009c01c019009c01c019009c01c019009c01c019005cf191b0e3f138e57e6802e7f3f9f9a0ff3184b56c369b9ff9f9ee7b24ec6b447c0e2dd5ef94d2f7eb8b670188c59b4038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380fb038de5a2e747c272f50000000049454e44ae426082]]>
</Icon>
 </Icons>
 <Model version="4.5" build="4.4.1.4356">
    <Sidops>
<![CDATA[Submodel2 360 296 description '<Information>
 <Description>
    <Version>4.5</Version>
  <LibraryPath>FlowRestriction\CombFixedROHR.emx</LibraryPath>
  <TimeStamp>2015-11-14 17:34:21</TimeStamp>
<IsMainModel>1</IsMainModel>
  <KeepParameterValues>False</KeepParameterValues>
 </Description>
</Information>'; type Submodel  ports   signal in phi;   signal in x_lev;   signal in fiinj;   signal in omegaE; end; implementation eqparameters	integer global nCyl;	integer global nStroke;	real global hn;//	real global fiinj;	real global mqf_max;	real global fs;	real global S, B, lambdaR, CR;// Englib	string global dll_ICE;//	string dll_fcn_rohr    = 'ice_rohr';//	string dll_icemax    = 'ice_pfimax';//	string hidden dll_fcn_ThDP = 'thdyn_CombGasZach'; // subroutines names in the dll file//	string dll_fcn_rohr = 		'ice_rohr2';	real global wiebe_para[9];variables	real phi;	real phi_comb;	real P, F, T;	real dmf;	real mqf;//	real inarr_ROHR[20], outarr_ROHR[13];	real fiig;//	real hidden inarr_pfimax[3], outarr_pfimax[2];//	real hidden inarr_ThermoProp[3], outarr_ThermoProp[13];//	real Pmax, Pmax_pfi;//	real bmepnom, omeganom;//	real eta_i, sfoc;//	real mfPC, mf, Oldmf, OldmfPC;	boolean reset;		real dphi_comb, igdel, dmf_nom;	real yp, ym, yl, yptomp, ymtomm, yltoml, df1dy, df2dy, df3dy;	initialequations	Comb_state = 0;	// 0: Start of new cycle / 1 : injection started / 2 : start of combustion / 5: end of combustion//	if fiinj > 180 then fiinj = fiinj - 360; end;		fiig = 0;	reset = true;	mqf = 0;	dmf = 0;	dphi_comb = wiebe_para[3] + wiebe_para[6];code	P=pp.e; F=pF.e; T=pT.e;	phi = pfi*180/pi mod 360;	if phi > 180 then 		phi_comb= phi - 360;  	else		phi_comb = phi;	end;	if phi_comb > fiinj and Comb_state == 0 then		Comb_state = 1;		mqf = mqf_max * x_lev;		igdel = 180/pi*omega*1e-3*0.0405*exp(5473/T)*(P*1e-5)^(-0.757);		if igdel > 30 then			Comb_state = 5;		end;		fiig = fiinj + igdel;		reset = false;			else if phi_comb > fiig and phi_comb < fiig + dphi_comb and Comb_state == 1 then				Comb_state = 2;				reset = true;			else	if phi_comb > fiig + dphi_comb and reset == true then						Comb_state = 5;						reset = false;					end;			end;	end;				if phi_comb > -20 and phi_comb < -15 then		Comb_state = 0;		reset = true;	end;				switch Comb_state		case 2 do			yp = max([(phi_comb - fiig) / wiebe_para[4];0]);			ym = max([0;(phi_comb - (fiig + wiebe_para[3]))/wiebe_para[5]]);			yl = max([0;(phi_comb - (fiig + wiebe_para[3]))/wiebe_para[6]]);			yptomp = yp^wiebe_para[7];			ymtomm = ym^wiebe_para[8];			yltoml = yl^wiebe_para[9];			df1dy = 6.9*(wiebe_para[7] + 1)*yptomp*exp(-6.9*yp*yptomp) / wiebe_para[4];			df2dy = 6.9*(wiebe_para[8] + 1)*ymtomm*exp(-6.9*ym*ymtomm) / wiebe_para[5];			df3dy = 6.9*(wiebe_para[9] + 1)*yltoml*exp(-6.9*yl*yltoml) / wiebe_para[6];			dmf_nom = wiebe_para[1]*df1dy + wiebe_para[2]*df2dy + (1-wiebe_para[1] - wiebe_para[2])*df3dy;			dmf = mqf*dmf_nom*omega*180/pi;		default do			dmf = 0;	end;		pp.f=dmf;	pF.f= dmf;	pT.f=dmf*hn;	/*	inarr_pfimax=[time; phi; P];	outarr_pfimax=dll(dll_ICE,dll_icemax, inarr_pfimax);	Pmax=outarr_pfimax[1];Pmax_pfi=outarr_pfimax[2];	p_max = [Pmax;Pmax_pfi];	*/implementation_end;]]>
  </Sidops>
</Model>
</Document>
