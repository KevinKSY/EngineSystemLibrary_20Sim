<?xml version="1.0" encoding="UTF-8"?>
<Document>
  <Model version="4.5" build="4.5.4.6171">
    <Sidops>
<![CDATA[LoadTemp 983.9 304 description '<Information>
 <Description>
    <Version>4.5</Version>
<IsMainModel>1</IsMainModel>
  <KeepParameterValues>False</KeepParameterValues>
  <AllowLibraryUpdate>True</AllowLibraryUpdate>
  <Configuration>
   <struct>
    <member>
     <name>DocumentationMask</name>
     <value>
      <struct></struct>
     </value>
    </member>
   </struct>
  </Configuration>
    <LibraryPath>Load\LoadUser.emx</LibraryPath>
  <TimeStamp>2015-11-16 22:57:52</TimeStamp>
</Description>
 <Attributes>
  <GlobalRelations>// Load Selection and Definition
// Load_index          Load_amp    Load_bias       Start_time      T_Load
// 1-Constant          N/A,        Load,           N/A,            N/A
// 2-Step,             Final,      Initial,        Step time,      N/A,
// 3-Sine,             amp,        bias,           Delay,          Period
// 4-keyboard,

parameters
	integer index = 1;
	real Load_amb = 1;
	real Load_bias = 1;
	real Start_time = 1;
	real T_Load = 1;</GlobalRelations>
 </Attributes>
</Information>'; type Submodel  ports   power out p; end; implementation bg  submodels   Constant 1152 208    description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Signal\Sources\Constant.emx</LibraryPath>  <TimeStamp>2007-10-19 14:48:44</TimeStamp></Description>';    type Constant     ports      signal out output;    end;    icon bg bottom     figures      rectangle 1136.1 192 1167.9 224 fill 15132390;      line 1140.9 203.6 1162.9 203.6 color 16711680 width 2;      line 1138.2 214.7 1163.9 214.7;      line 1140.5 198.7 1140.5 217;    end;    implementation eqparameters	real global Load_bias;equations	output = Load_bias;     implementation_end;   Keyboard 1152 416    description '<Information> <Description>    <LibraryPath>Signal\Sources\Keyboard.emx</LibraryPath>  <TimeStamp>2013-7-16 09:12:41</TimeStamp>  <Version>4.3</Version><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>  <AllowLibraryUpdate>True</AllowLibraryUpdate>  <Configuration>   <struct>    <member>     <name>DocumentationMask</name>     <value>     <struct/>     </value>    </member>   </struct>  </Configuration> </Description></Information>';    type Keyboard     ports      signal out keycode; "scancode of the pressed key"      signal boolean out left; "left key pressed"      signal boolean out up; "up key pressed"      signal boolean out right; "right key pressed"      signal boolean out down; "down key pressed"    end;    icon bg bottom     figures      rectangle 1120 400 1184 432 fill 15132390;      text 'Keyboard' 1152 416 color 16711680 16;    end;    implementation eqconstants//	integer KEY_ESCAPE          = 1;//	integer KEY_1               = 2; //	integer KEY_2               = 3;  //	integer KEY_3               = 4;//	integer KEY_4               = 5;//	integer KEY_5               = 6;//	integer KEY_6               = 7;//	integer KEY_7               = 8;//	integer KEY_8               = 9;//	integer KEY_9               = 10;//	integer KEY_0               = 11;//	integer KEY_MINUS           = 12;	/* - on main keyboard *///	integer KEY_EQUALS          = 13;//	integer KEY_BACK            = 14;	/* backspace *///	integer KEY_TAB             = 15;//	integer KEY_Q               = 16;//	integer KEY_W               = 17;//	integer KEY_E               = 18;//	integer KEY_R               = 19;//	integer KEY_T               = 20;//	integer KEY_Y               = 21;//	integer KEY_U               = 22;//	integer KEY_I               = 23;//	integer KEY_O               = 24;//	integer KEY_P               = 25;//	integer KEY_LBRACKET        = 26;//	integer KEY_RBRACKET        = 27;//	integer KEY_RETURN          = 28;	/* Enter on main keyboard *///	integer KEY_LCONTROL        = 29;//	integer KEY_A               = 30;//	integer KEY_S               = 31;//	integer KEY_D               = 32;//	integer KEY_F               = 33;//	integer KEY_G               = 34;//	integer KEY_H               = 35;//	integer KEY_J               = 36;//	integer KEY_K               = 37;//	integer KEY_L               = 38;//	integer KEY_SEMICOLON       = 39;//	integer KEY_APOSTROPHE      = 40;//	integer KEY_GRAVE           = 41;	/* accent grave *///	integer KEY_LSHIFT          = 42;	//	integer KEY_BACKSLASH       = 43;//	integer KEY_Z               = 44;//	integer KEY_X               = 45;//	integer KEY_C               = 46;//	integer KEY_V               = 47;//	integer KEY_B               = 48;//	integer KEY_N               = 49;//	integer KEY_M               = 50;//	integer KEY_COMMA           = 51;//	integer KEY_PERIOD          = 52;	/* . on main keyboard *///	integer KEY_SLASH           = 53;	/* / on main keyboard *///	integer KEY_RSHIFT          = 54;//	integer KEY_MULTIPLY        = 55;	/* * on numeric keypad *///	integer KEY_LMENU           = 56;	/* left Alt *///	integer KEY_SPACE           = 57;//	integer KEY_CAPITAL         = 58;//	integer KEY_F1              = 59;//	integer KEY_F2              = 60;//	integer KEY_F3              = 61;//	integer KEY_F4              = 62;//	integer KEY_F5              = 63;//	integer KEY_F6              = 64;//	integer KEY_F7              = 65;//	integer KEY_F8              = 66;//	integer KEY_F9              = 67;//	integer KEY_F10             = 68;//	integer KEY_NUMLOCK         = 69;//	integer KEY_SCROLL          = 70;	/* Scroll Lock *///	integer KEY_NUMPAD7         = 71;//	integer KEY_NUMPAD8         = 72;//	integer KEY_NUMPAD9         = 73;//	integer KEY_SUBTRACT        = 74;	/* - on numeric keypad *///	integer KEY_NUMPAD4         = 75;//	integer KEY_NUMPAD5         = 76;//	integer KEY_NUMPAD6         = 77;//	integer KEY_ADD             = 78;	/* + on numeric keypad *///	integer KEY_NUMPAD1         = 79;//	integer KEY_NUMPAD2         = 80;//	integer KEY_NUMPAD3         = 81;//	integer KEY_NUMPAD0         = 82;//	integer KEY_DECIMAL         = 83;	/* . on numeric keypad *///	integer KEY_OEM_102         = 86;	/* < > | on UK/Germany keyboards *///	integer KEY_F11             = 87;//	integer KEY_F12             = 88;//	integer KEY_F13             = 100;	/*                     (NEC PC98) *///	integer KEY_F14             = 101;	/*                     (NEC PC98) *///	integer KEY_F15             = 102;	/*                     (NEC PC98) *///	integer KEY_KANA            = 112;	/* (Japanese keyboard)            *///	integer KEY_ABNT_C1         = 115;	/* / ? on Portugese (Brazilian) keyboards *///	integer KEY_CONVERT         = 121;	/* (Japanese keyboard)            *///	integer KEY_NOCONVERT       = 123;	/* (Japanese keyboard)            *///	integer KEY_YEN             = 125;	/* (Japanese keyboard)            *///	integer KEY_ABNT_C2         = 126;	/* Numpad . on Portugese (Brazilian) keyboards *///	integer KEY_NUMPADEQUALS    = 141;	/* = on numeric keypad (NEC PC98) *///	integer KEY_PREVTRACK       = 144;	/* Previous Track (KEY_CIRCUMFLEX on Japanese keyboard) *///	integer KEY_AT              = 145;	/*                     (NEC PC98) *///	integer KEY_COLON           = 146;	/*                     (NEC PC98) *///	integer KEY_UNDERLINE       = 147;	/*                     (NEC PC98) *///	integer KEY_KANJI           = 148;	/* (Japanese keyboard)            *///	integer KEY_STOP            = 149;	/*                     (NEC PC98) *///	integer KEY_AX              = 150;	/*                     (Japan AX) *///	integer KEY_UNLABELED       = 151;	/*                        (J3100) *///	integer KEY_NEXTTRACK       = 153;	/* Next Track *///	integer KEY_NUMPADENTER     = 156;	/* Enter on numeric keypad *///	integer KEY_RCONTROL        = 157;	//	integer KEY_MUTE            = 160;	/* Mute *///	integer KEY_CALCULATOR      = 161;	/* Calculator *///	integer KEY_PLAYPAUSE       = 162;	/* Play / Pause *///	integer KEY_MEDIASTOP       = 164;	/* Media Stop *///	integer KEY_VOLUMEDOWN      = 174;	/* Volume - *///	integer KEY_VOLUMEUP        = 176;	/* Volume + *///	integer KEY_WEBHOME         = 178;	/* Web home *///	integer KEY_NUMPADCOMMA     = 179;	/* , on numeric keypad (NEC PC98) *///	integer KEY_DIVIDE          = 181;	/* / on numeric keypad *///	integer KEY_SYSRQ           = 183;	//	integer KEY_RMENU           = 184;	/* right Alt *///	integer KEY_PAUSE           = 197;	/* Pause *///	integer KEY_HOME            = 199;	/* Home on arrow keypad */	integer KEY_UP              = 200;	/* UpArrow on arrow keypad *///	integer KEY_PRIOR           = 201;	/* PgUp on arrow keypad */	integer KEY_LEFT            = 203;	/* LeftArrow on arrow keypad */	integer KEY_RIGHT           = 205;	/* RightArrow on arrow keypad *///	integer KEY_END             = 207;	/* End on arrow keypad */	integer KEY_DOWN            = 208;	/* DownArrow on arrow keypad *///	integer KEY_NEXT            = 209;	/* PgDn on arrow keypad *///	integer KEY_INSERT          = 210;	/* Insert on arrow keypad *///	integer KEY_DELETE          = 211;	/* Delete on arrow keypad *///	integer KEY_LWIN            = 219;	/* Left Windows key *///	integer KEY_RWIN            = 220;	/* Right Windows key *///	integer KEY_APPS            = 221;	/* AppMenu key *///	integer KEY_POWER           = 222;	/* System Power *///	integer KEY_SLEEP           = 223;	/* System Sleep *///	integer KEY_WAKE            = 227;	/* System Wake *///	integer KEY_WEBSEARCH       = 229;	/* Web Search *///	integer KEY_WEBFAVORITES    = 230;	/* Web Favorites *///	integer KEY_WEBREFRESH      = 231;	/* Web Refresh *///	integer KEY_WEBSTOP         = 232;	/* Web Stop *///	integer KEY_WEBFORWARD      = 233;	/* Web Forward *///	integer KEY_WEBBACK         = 234;	/* Web Back *///	integer KEY_MYCOMPUTER      = 235;	/* My Computer *///	integer KEY_MAIL            = 236;	/* Mail *///	integer KEY_MEDIASELECT     = 237;	/* Media Select */variables	real input[1];	real output[256];		/* scancodes of pressed keys */	integer n;				/* amount of keys pressed */	integer i;code	// read the scancode(s) of the keyboard	input = [ time ];	output = dll ('keyboard.dll', 'Read', input);	// get the amount of keys pressed at the same time	n = trunc(output[1]);	// and let's create some additional outputs as well	left = false;	right = false;	up = false;	down = false;	keycode = 0;	// for all pressed keys	for i = 1 to n do		// get the pressed scancode		keycode = trunc (output[i+1]);		// set the corresponding output		switch keycode			case KEY_LEFT do left = true;			case KEY_UP do up = true;			case KEY_RIGHT do right = true;			case KEY_DOWN do down = true;		end;	end;implementation_end;   MSe 936 304    description '<Information> <Description>    <Version>4.2</Version><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>    <LibraryPath>Bond Graph\MSe.emx</LibraryPath>  <TimeStamp>2011-11-29 16:12:33</TimeStamp></Description></Information>';    type MSe     ports      power out p;      signal in effort;     restrictions      causality fixed out p;    end;    icon bg bottom     figures      text 'MSe' 936 304 18 bold;    end;    implementation eqvariables	real flow;equations	p.e = effort;	flow = p.f;implementation_end;   plug p 865 304;   Sine 1152 272    description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Signal\Sources\WaveGenerator-Sine.emx</LibraryPath>  <TimeStamp>2007-9-27 16:12:6</TimeStamp></Description>';    type 'WaveGenerator-Sine'     ports      signal out output;    end;    icon bg bottom     figures      group       rectangle 1136 256 1168 288 fill 15132390;       line 1140.5 262.4 1140.5 281.6;       line 1166.1 272 1137.3 272;       spline 1140.9 271.9 1144.1 263.8 1147.3 271.9 1150.6 280 1153.7 271.9 1156.8 263.8 1160.1 271.9 1163.6 280.2 1166.8 272.2 color 16711680;      end;    end;    implementation eqparameters	real global Load_amb;	real global Load_bias;	real global T_Load;	real global Start_time;variables	boolean hidden change;	real hidden half;	real omega;initialequations	omega = 2*pi/T_Load;	equations	"calculate at least 2 points per cycle to get a triangle"	half = pi / omega;	change = frequencyevent (half, half / 2);	"calculate the sine wave"	if time < Start_time then		output = Load_bias;	else		output = Load_amb * sin ( omega * time) + Load_bias;	end;implementation_end;   Step 1152 336    description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Signal\Sources\SignalGenerator-Step.emx</LibraryPath>  <TimeStamp>2007-9-27 16:2:44</TimeStamp></Description>';    type 'SignalGenerator-Step'     ports      signal out output;    end;    icon bg bottom     figures      group       rectangle 1136 320 1168 352 fill 15132390;       line 1145.6 332.8 1162.6 332.8 color 16711680 width 2;       line 1138.9 344 1165.1 344;       line 1141.1 344.1 1145.7 344.1 1145.7 332.7 color 16711680 width 2;       line 1141.1 328 1141.1 346.2;      end;    end;    implementation eqparameters	real global Load_bias;	real global Load_amp; 	real global Start_time;variables	boolean hidden change;equations	"calculate at least at the start time"	change = timeevent (Start_time);		"calculate the step signal"	output = Load_bias + Load_amp * step (Start_time);     implementation_end;   Switch 1024 304			specifications active 'boolean'				specification 'boolean' description '<Description><Version>4.0</Version><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues>   <LibraryPath>Signal\Block Diagram Non-Linear\Switch.emx</LibraryPath>  <TimeStamp>2008-1-21 12:28:27</TimeStamp></Description>'; type 'Switch-Boolean'  ports   signal in input1;   signal in input2;   signal out output;   signal in input3;   signal in input4; end; icon bg bottom  figures   rectangle 996 276 1052 332 fill 15132390;   ellipse 1019 302.3 1023 306.7 color 16711680;   line 1019 304.2 999.7 303.7 color 16711680 width 2;   line 1024.4 294.9 1023.1 297.6 1021.5 294.6 1021.5 294.6 color 16711680 fill 16711680 open;   line 1023.3 279.7 1023.1 296.7 color 16711680 open;   line 1048.8 326 1044.6 326 color 16711680 width 2;   ellipse 1040.6 324.3 1044.3 328.1 color 16711680;   line 1048.8 313 1044.6 313 color 16711680 width 2;   ellipse 1040.6 311.3 1044.3 315.1 color 16711680;   line 1048.8 296 1044.6 296 color 16711680 width 2;   ellipse 1040.6 294.3 1044.3 298.1 color 16711680;   line 1048.8 281 1044.6 281 color 16711680 width 2;   ellipse 1040.6 279.3 1044.3 283.1 color 16711680;   line 1024 304 1041 282 color 16711680;  terminals   input1 1064 280 fixed;   input2 1064 296 fixed;   output 984 304 fixed;   input3 1064 312 fixed;   input4 1064 328 fixed; end; implementation eqparameters	integer global index;equations	switch index		case 1 do			output = input1;		case 2 do			output = input2;		case 3 do			output = input3;		case 4 do			output = input4;		default do			output = 0;	end;							        implementation_end;specification_end;				specification 'real'description '<Information> <Description>    <Version>4.4</Version><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>    <LibraryPath>Signal\Block Diagram Non-Linear\Switch.emx</LibraryPath>  <TimeStamp>2014-9-18 09:37:34</TimeStamp></Description></Information>'; type 'Switch-Default'  ports   signal in input_high;   signal in input_low;   signal in condition;   signal out output; end; icon bg bottom  figures   rectangle 448 368 480 400 fill 15132390;   ellipse 467 382.3 471 386.7 color 16711680;   ellipse 455.5 373.9 459.6 377.9 color 16711680;   line 460.4 377.8 466.8 382.8 color 16711680 width 2;   line 471 384.2 477.8 384.2 color 16711680 width 2;   line 451.2 394 455.4 394 color 16711680 width 2;   line 451.1 375.9 455.3 375.9 color 16711680 width 2;   ellipse 455.7 392.3 459.4 396.1 color 16711680;   line 465.6 374.9 466.9 377.6 468.5 374.6 468.5 374.6 color 16711680 fill 16711680 open;   line 466.7 370.7 466.9 376.7 color 16711680 open;  terminals   input_high 448 392 fixed;   input_low 448 376 fixed;   condition 464 368 fixed;   output 480 384 fixed; end; implementation eqequations	output = if condition >= 0.0 then		input_high	else		if condition < 0.0 then			input_low		else			0.0		end	end;        implementation_end;specification_end;			end;  end;  connections   Constant\output -> Switch\input1;   Keyboard\down -> Switch\input4;   MSe\p => p;   Sine\output -> Switch\input2;   Step\output -> Switch\input3;   Switch\output -> MSe\effort;  end; implementation_end;]]>
    </Sidops>
  </Model>
</Document>
