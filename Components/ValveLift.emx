<?xml version="1.0" encoding="UTF-8"?>
<Document>
 <Icons>
    <Icon size="128" bpp="32" format="png">
<![CDATA[89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda793000000097048597300000ec400000ec401952b0e1b0000027449444154789ceddd314ec3301840e13f889da55355895b74e6203d0487e901b809e21a9d60c9dc91cd4c96206d42ea2a89a3f7bead2101cb7d71d3824893520a713d2c3d002dcb00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e00c00ce00e01ebb1b9aa6798a88d705c6a279bca594bef283a6fb5fc29aa6798e88cf9907a5f9bca4943ef2838b15203b1e8fb1dfefe7199226773a9de270385c6cef0d60b3d9c46eb79b74509acff97cbebadd8b403803803300380380330038038033003803803300380380330038038033003803803300b8debf0758d276bb8d8888b66d47ef9bdd724cde77eccfebdbaf640cb57005b853f7c9cfdbae6daf51d501fc37897d937fcff71cd2b66defd99dbfb6a6b33fa2d2006e9dc492895fdb1335952aaf016af5fb1aa0bb920cad4635c756e50a10717981d6756d724b8ea173052834f40e624da155bb02681e5507d0b7a40f9d6125c790551d80a6577d00dd337acc995c720c55f501685a0600b78ab781f983975b96f29263fa3e3f287de958c34b8f2bc0046a7ec2bb56b10244944dead863eed96fe897436be00a0067007006006700700600670070060067007006006700700600670070060067007006006700700600670070de3388e7df7b067d47c4fb7ce3d1ccfedc3be66205108bd70070060067007006006700700600670070060067007006006700700600670070060067007006006700700600670070060067007006006700700600670070060067007006006700700600670070060067007006006700703fb183ac9a66a2cc240000000049454e44ae426082]]>
   </Icon>
</Icons>
 <Model version="4.5" build="4.4.1.4356">
    <Sidops>
<![CDATA[ExhVVLift1 800 112specifications active 'Exhaust'	specification 'Exhaust' description '<Information>
 <Description>
    <Version>4.5</Version>
  <LibraryPath>Components\ValveLift.emx</LibraryPath>
<IsMainModel>1</IsMainModel>
  <KeepParameterValues>False</KeepParameterValues>
    <TimeStamp>2015-11-2 23:44:24</TimeStamp>
<AllowLibraryUpdate>False</AllowLibraryUpdate>
  <Configuration>
   <struct>
    <member>
     <name>DocumentationMask</name>
     <value>
      <struct></struct>
     </value>
    </member>
   </struct>
  </Configuration>
 </Description>
</Information>'; type ExhVVLift  ports   signal out lift;   signal in CA;   signal in CA_start_nom;   signal in dCA_lift_nom; end; icon bg bottom  figures   rectangle 763.9 96 836.1 128 fill 15132390;   text 'VVLift' 800 112 16;  terminals   lift 800 136 fixed;   CA 824 88 fixed;   CA_start_nom 776 88 fixed;   dCA_lift_nom 800 88 fixed; end; implementation eqparameters//	real CA_start_nom = 1.1;//	real dCA_lift_nom = 1;	string global dllToolbox;	string global fnc_interp;	integer global ExhProfNoRow1;	integer global ExhProfNoRow2;	real global ExhVVProfUpX[ExhProfNoRow1];	real global ExhVVProfUpY[ExhProfNoRow1];	real global ExhVVProfDownX[ExhProfNoRow2];	real global ExhVVProfDownY[ExhProfNoRow2];	real global ExhLift_max;	integer global nStroke;	real global ExhCA_start_ref; //Reference start CA for start of valve lift	real global ExhdCA_lift_up;	 //Lift up time (should not be changed unless file is changed	real global ExhdCA_lift_down; //Lift down time (should not be changed unless file is changed	real global ExhdCA_lift_top_ref; //Reference duration for lift upvariables	real inarr1[2*ExhProfNoRow1+2];							//length should be 2 * no. of row of profile table + 2	real inarr2[2*ExhProfNoRow2+2];							//length should be 2 * no. of row of profile table + 2	real CA_start, dCA_lift, dCA_total, CA_VV;	real phi;initialequations	inarr1[1] = ExhProfNoRow1;	inarr1[2:ExhProfNoRow1+1] = ExhVVProfUpX; 	inarr1[ExhProfNoRow1+2:ExhProfNoRow1*2+1] = ExhVVProfUpY;			inarr2[1] = ExhProfNoRow2;	inarr2[2:ExhProfNoRow2+1] = ExhVVProfDownX; 	inarr2[ExhProfNoRow2+2:ExhProfNoRow2*2+1] = ExhVVProfDownY;			equations	CA_start = CA_start_nom*ExhCA_start_ref;	dCA_lift = dCA_lift_nom*ExhdCA_lift_top_ref;		dCA_total = ExhdCA_lift_up + dCA_lift + ExhdCA_lift_down;	phi = CA*180/pi mod (nStroke*180);	if phi > CA_start and phi < CA_start + dCA_total then		CA_VV = phi - CA_start;		if CA_VV <= ExhdCA_lift_up then			inarr1[ExhProfNoRow1*2+2] = CA_VV;			lift = dll(dllToolbox, fnc_interp, inarr1);		else 	if CA_VV <= ExhdCA_lift_up + dCA_lift then					lift = 1;			  	else 	if CA_VV <= ExhdCA_lift_up + dCA_lift + ExhdCA_lift_down then							CA_VV = phi - (CA_start + ExhdCA_lift_up + dCA_lift);							inarr2[ExhProfNoRow2*2+2] = CA_VV;							lift = dll(dllToolbox, fnc_interp,inarr2);					 	else 					 		lift = 0;							end;				end;		end;	else		lift = 0;		end;				lift = ExhLift_max*lift; implementation_end;specification_end;	specification 'Intake' description '<Information> <Description>    <Version>4.5</Version>  <LibraryPath>Components\ValveLift.emx</LibraryPath><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>    <TimeStamp>2015-10-20 15:16:35</TimeStamp><AllowLibraryUpdate>False</AllowLibraryUpdate>  <Configuration>   <struct>    <member>     <name>DocumentationMask</name>     <value>      <struct></struct>     </value>    </member>   </struct>  </Configuration> </Description></Information>'; type ExhVVLift  ports   signal out lift;   signal in CA;   signal in CA_start_nom;   signal in dCA_lift_nom; end; icon bg bottom  figures   rectangle 763.9 96 836.1 128 fill 15132390;   text 'VVLift' 800 112 16;  terminals   lift 800 136 fixed;   CA 824 88 fixed;   CA_start_nom 776 88 fixed;   dCA_lift_nom 800 88 fixed; end; implementation eqparameters//	real CA_start_nom = 1.1;//	real dCA_lift_nom = 1;	string global dllToolbox = 'dllTool20Sim.dll';	string global fnc_interp = 'interpolate';	integer global InProfNoRow1;	integer global InProfNoRow2;	real global InVVProfUpX[InProfNoRow1]; 	real global InVVProfUpY[InProfNoRow1];	real global InVVProfDownX[InProfNoRow2];	real global InVVProfDownY[InProfNoRow2];	real global InLift_max = 1;	real global nstorke = 2;	real hidden global InCA_start_ref = 107; //Reference start CA for start of valve lift	real hidden global IndCA_lift_up = 37.7;	 //Lift up time (should not be changed unless file is changed	real hidden global IndCA_lift_down = 52; //Lift down time (should not be changed unless file is changed	real hidden global IndCA_lift_top_ref = 60; //Reference duration for lift upvariables	real inarr1[InProfNoRow1*2+2];							//length should be 2 * no. of row of profile table + 1	real inarr2[InProfNoRow2*2+2];							//length should be 2 * no. of row of profile table + 1	real CA_start, dCA_lift, dCA_total, CA_VV;	real phi;initialequations	inarr1[1] = InProfNoRow1;	inarr1[2:InProfNoRow1+1] = InVVProfUpX; 	inarr1[InProfNoRow1+2:InProfNoRow1*2+1] = InVVProfUpY;			inarr2[1] = InProfNoRow2;	inarr2[2:InProfNoRow2+1] = InVVProfUpX; 	inarr2[InProfNoRow2+2:InProfNoRow2+1] = InVVProfUpY;			equations	CA_start = CA_start_nom*InCA_start_ref;	dCA_lift = dCA_lift_nom*IndCA_lift_top_ref;		dCA_total = IndCA_lift_up + dCA_lift + IndCA_lift_down;	phi = CA*180/pi mod (nstorke*180);	if phi > CA_start and phi < CA_start + dCA_total then		CA_VV = phi - CA_start;		if CA_VV <= IndCA_lift_up then			inarr1[InProfNoRow1*2+2] = CA_VV;			lift = dll(dllToolbox, fnc_interp, inarr1);		else 	if CA_VV <= IndCA_lift_up + dCA_lift then					lift = 1;			  	else 	if CA_VV <= IndCA_lift_up + dCA_lift + IndCA_lift_down then							CA_VV = phi - (CA_start + IndCA_lift_up + dCA_lift);							inarr2[InProfNoRow2*2+2] = CA_VV;							lift = dll(dllToolbox, fnc_interp,inarr2);					 	else 					 		lift = 0;							end;				end;		end;	else		lift = 0;		end;				lift = InLift_max*lift; implementation_end;specification_end;end;]]>
  </Sidops>
</Model>
</Document>
