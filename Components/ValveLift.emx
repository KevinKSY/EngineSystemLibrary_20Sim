<?xml version="1.0" encoding="UTF-8"?>
<Document>
 <Icons>
    <Icon size="128" bpp="32" format="png">
<![CDATA[89504e470d0a1a0a0000000d4948445200000080000000800806000000c33e61cb00000006624b474400ff00ff00ffa0bda793000000097048597300000ec400000ec401952b0e1b000002d449444154789ceddd4f6eda401840f1cf55f715ff7648bd07ab5e819bf444a837a97a0ab6eddee02ebb7317d144083c604c31e3bef75b05c72613fb31b61394546ddb86b83ebc7a007a2d038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380fb78bea0aaaa4f11f1f50563d138beb56dfb2b3da8ceff4a5855559f23e2e7c883d278beb46dfb233db8980192dd6e179bcd669c21e9e9f6fb7d6cb7db8be5d90056ab55acd7eba70e4ae3391e8f9dcbbd08843300b8ec29a06ddbf0cfc8fe3f72c7d21900ce00e00c00ce6b0008af01d4c900e0b2a78088fcb4a1e9f114a04e0600e75d009c33009c01c015790a98cd661111d1344def75937bb649ebf6fd7ab9f5868c616cde053cc9f9c14fcbba9697a8e8006eedc4dcce7fe439af699a26fbea4e9f2bf1d57f4d9101dcbb1387ecf8a91da86729f21ae07c1cf7ae33649b3edbcde7f388787b7f5dfa38b9361be5de8f37a6c95d03a49d76bea393d383f1c83674577f17a0bcf3d84ea39a5268c5ce001a47d101e4a6f46bafb021db90151d809eaff8f7031c0e87582c16319fcfdf3f4ecb73e31bb24d44ffefb7ef1d4409fb2f99dc5d80c6610070c5ff202822a2aeeb582e97ef53795dd737c736649bb46ed7739dea3bdd9f7eed57f31430a2120e785f93f941d0909dda779b47d6cb6d3b95089c01e026710da0e77106803300384f0110de06aa9301c015ffcb20fd1b9e02d4c900e00c00cedb4008af01d4c900e03c0540780a50270380f31400913b96fecf209e9bff33e84f447c1f6f3c1ad9efd30717338058bc088433003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380330038038033003803803300380380fb0b1a394ea472d0171d0000000049454e44ae426082]]>
   </Icon>
</Icons>
 <Model version="4.6" build="4.4.1.4356">
    <Sidops>
<![CDATA[IntakeVVLift1 304 120specifications active 'ExhaustVarLift'	specification 'Exhaust'description '<Information> <Description>    <Version>4.5</Version>  <LibraryPath>Components\ValveLift.emx</LibraryPath><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>    <TimeStamp>2015-11-2 23:44:24</TimeStamp><AllowLibraryUpdate>False</AllowLibraryUpdate>  <Configuration>   <struct>    <member>     <name>DocumentationMask</name>     <value>      <struct></struct>     </value>    </member>   </struct>  </Configuration> </Description></Information>'; type ExhVVLift  ports   signal out lift;   signal in CA;   signal in CA_start_nom;   signal in dCA_lift_nom; end; icon bg bottom  figures   rectangle 763.9 96 836.1 128 fill 15132390;   text 'VVLift' 800 112 16;  terminals   lift 800 136 fixed;   CA 824 88 fixed;   CA_start_nom 776 88 fixed;   dCA_lift_nom 800 88 fixed; end; implementation eqparameters//	real CA_start_nom = 1.1;//	real dCA_lift_nom = 1;	string global dllToolbox;	string global fnc_interp;	integer global ExhProfNoRow1;	integer global ExhProfNoRow2;	real global ExhVVProfUpX[ExhProfNoRow1];	real global ExhVVProfUpY[ExhProfNoRow1];	real global ExhVVProfDownX[ExhProfNoRow2];	real global ExhVVProfDownY[ExhProfNoRow2];	real global ExhLift_max;	integer global nStroke;	real global ExhCA_start_ref; //Reference start CA for start of valve lift	real global ExhdCA_lift_up;	 //Lift up time (should not be changed unless file is changed	real global ExhdCA_lift_down; //Lift down time (should not be changed unless file is changed	real global ExhdCA_lift_top_ref; //Reference duration for lift upvariables	real inarr1[2*ExhProfNoRow1+2];							//length should be 2 * no. of row of profile table + 2	real inarr2[2*ExhProfNoRow2+2];							//length should be 2 * no. of row of profile table + 2	real CA_start, dCA_lift, dCA_total, CA_VV;	real phi;initialequations	inarr1[1] = ExhProfNoRow1;	inarr1[2:ExhProfNoRow1+1] = ExhVVProfUpX; 	inarr1[ExhProfNoRow1+2:ExhProfNoRow1*2+1] = ExhVVProfUpY;			inarr2[1] = ExhProfNoRow2;	inarr2[2:ExhProfNoRow2+1] = ExhVVProfDownX; 	inarr2[ExhProfNoRow2+2:ExhProfNoRow2*2+1] = ExhVVProfDownY;			equations	CA_start = CA_start_nom*ExhCA_start_ref;	dCA_lift = dCA_lift_nom*ExhdCA_lift_top_ref;		dCA_total = ExhdCA_lift_up + dCA_lift + ExhdCA_lift_down;	phi = CA*180/pi mod (nStroke*180);	if phi > CA_start and phi < CA_start + dCA_total then		CA_VV = phi - CA_start;		if CA_VV <= ExhdCA_lift_up then			inarr1[ExhProfNoRow1*2+2] = CA_VV;			lift = dll(dllToolbox, fnc_interp, inarr1);		else 	if CA_VV <= ExhdCA_lift_up + dCA_lift then					lift = 1;			  	else 	if CA_VV <= ExhdCA_lift_up + dCA_lift + ExhdCA_lift_down then							CA_VV = phi - (CA_start + ExhdCA_lift_up + dCA_lift);							inarr2[ExhProfNoRow2*2+2] = CA_VV;							lift = dll(dllToolbox, fnc_interp,inarr2);					 	else 					 		lift = 0;							end;				end;		end;	else		lift = 0;		end;				lift = ExhLift_max*lift; implementation_end;specification_end;	specification 'ExhaustVarLift' description '<Information>
 <Description>
    <Version>4.6</Version>
  <LibraryPath>Components\ValveLift.emx</LibraryPath>
<IsMainModel>1</IsMainModel>
  <KeepParameterValues>False</KeepParameterValues>
    <TimeStamp>2016-4-4 11:19:41</TimeStamp>
<AllowLibraryUpdate>False</AllowLibraryUpdate>
  <Configuration>
   <struct>
    <member>
     <name>DocumentationMask</name>
     <value>
      <struct></struct>
     </value>
    </member>
   </struct>
  </Configuration>
 </Description>
 <Attributes>
  <GlobalRelations></GlobalRelations>
 </Attributes>
</Information>'; type ExhVVLift  ports   signal out lift;   signal in CA;   signal in CA_start_nom;   signal in dCA_lift_nom; end; icon bg bottom  figures   rectangle 267.9 104 340.1 136 color 0 fill 15132390;   text 'VVLift' 304 120 color 0 16;  terminals   lift 304 144 fixed;   CA 328 96 fixed;   CA_start_nom 280 96 fixed;   dCA_lift_nom 304 96 fixed; end; implementation eqparameters	string global dllToolbox;	string global fnc_interp;	integer global ExhProfNoRow1;	integer global ExhProfNoRow2;	real global ExhVVProfUp[ExhProfNoRow1];	real global ExhVVProfDown[ExhProfNoRow1];	real global ExhLift_max;	real global nStroke;	real global ExhCA_start_ref; //Reference start CA for start of valve lift	real global ExhdCA_lift_up;	 //Lift up time (should not be changed unless file is changed	real global ExhdCA_lift_down; //Lift down time (should not be changed unless file is changed//	real hidden global IndCA_lift_top_ref = 0; //Reference duration for lift upvariables	real inarr1[ExhProfNoRow1*2+2];							//length should be 2 * no. of row of profile table + 1	real inarr2[ExhProfNoRow2*2+2];							//length should be 2 * no. of row of profile table + 1	real CA_start, dCA_lift, dCA_total, CA_VV;	real CA_start_cyc;	real dCA_total_ref;	real phi;	integer i;	boolean reset;initialequations	CA_start_cyc = 720;	reset = true;	inarr1[1] = ExhProfNoRow1;	for i = 1 to ExhProfNoRow1 do		inarr1[i+1] = i / ExhProfNoRow1;	end;	inarr1[ExhProfNoRow1+2:ExhProfNoRow1*2+1] = ExhVVProfUp;			inarr2[1] = ExhProfNoRow2;	for i = 1 to ExhProfNoRow2 do		inarr2[i+1] = i / ExhProfNoRow2;	end;		inarr2[ExhProfNoRow2+2:ExhProfNoRow2*2+1] = ExhVVProfDown;		dCA_total_ref = ExhdCA_lift_up + ExhdCA_lift_down;		equations	CA_start = CA_start_nom*ExhCA_start_ref;	phi = CA*180/pi mod (nStroke*180);	if phi > CA_start and reset == true then		reset = false;		CA_start_cyc = CA_start;		dCA_total = dCA_total_ref * max([1; dCA_lift_nom]);		dCA_lift = dCA_total - dCA_total_ref;		end;	if phi > CA_start_cyc then		if phi < CA_start_cyc + dCA_total then			CA_VV = (phi - CA_start_cyc)/ExhdCA_lift_up;			if CA_VV <= 1 then				inarr1[ExhProfNoRow1*2+2] = CA_VV;				lift = dll(dllToolbox, fnc_interp, inarr1);			else 					CA_VV = (phi - CA_start_cyc)/(ExhdCA_lift_up + dCA_lift);				if CA_VV <= 1 then					lift = 1;			  	else 						CA_VV = (phi - (CA_start_cyc + ExhdCA_lift_up + dCA_lift))/ExhdCA_lift_down;					inarr2[ExhProfNoRow2*2+2] = CA_VV;					lift = dll(dllToolbox, fnc_interp,inarr2);				end;			end;		else			lift = 0;		end;	else		lift = 0;			if reset == false then			reset = true;			CA_start_cyc = 720;		end;								end;				lift = ExhLift_max*lift; implementation_end;specification_end;	specification 'Intake'description '<Information> <Description>    <Version>4.5</Version>  <LibraryPath>Components\ValveLift.emx</LibraryPath><IsMainModel>1</IsMainModel>  <KeepParameterValues>False</KeepParameterValues>    <TimeStamp>2015-10-20 15:16:35</TimeStamp><AllowLibraryUpdate>False</AllowLibraryUpdate>  <Configuration>   <struct>    <member>     <name>DocumentationMask</name>     <value>      <struct></struct>     </value>    </member>   </struct>  </Configuration> </Description></Information>'; type ExhVVLift  ports   signal out lift;   signal in CA;   signal in CA_start_nom;   signal in dCA_lift_nom; end; icon bg bottom  figures   rectangle 267.9 96 340.1 128 color 0 fill 15132390;   text 'VVLift' 304 112 color 0 16;  terminals   lift 304 136 fixed;   CA 328 88 fixed;   CA_start_nom 280 88 fixed;   dCA_lift_nom 304 88 fixed; end; implementation eqparameters//	real CA_start_nom = 1.1;//	real dCA_lift_nom = 1;	string global dllToolbox = 'dllTool20Sim.dll';	string global fnc_interp = 'interpolate';	integer global InProfNoRow1;	integer global InProfNoRow2;	real global InVVProfUpX[InProfNoRow1]; 	real global InVVProfUpY[InProfNoRow1];	real global InVVProfDownX[InProfNoRow2];	real global InVVProfDownY[InProfNoRow2];	real global InLift_max = 1;	real global nstorke = 0;	real hidden global InCA_start_ref = 107; //Reference start CA for start of valve lift	real hidden global IndCA_lift_up = 37.7;	 //Lift up time (should not be changed unless file is changed	real hidden global IndCA_lift_down = 52; //Lift down time (should not be changed unless file is changed	real hidden global IndCA_lift_top_ref = 60; //Reference duration for lift upvariables	real inarr1[InProfNoRow1*2+2];							//length should be 2 * no. of row of profile table + 1	real inarr2[InProfNoRow2*2+2];							//length should be 2 * no. of row of profile table + 1	real CA_start, dCA_lift, dCA_total, CA_VV;	real phi;initialequations	inarr1[1] = InProfNoRow1;	inarr1[2:InProfNoRow1+1] = InVVProfUpX; 	inarr1[InProfNoRow1+2:InProfNoRow1*2+1] = InVVProfUpY;			inarr2[1] = InProfNoRow2;	inarr2[2:InProfNoRow2+1] = InVVProfUpX; 	inarr2[InProfNoRow2+2:InProfNoRow2+1] = InVVProfUpY;			equations	CA_start = CA_start_nom*InCA_start_ref;	dCA_lift = dCA_lift_nom*IndCA_lift_top_ref;		dCA_total = IndCA_lift_up + dCA_lift + IndCA_lift_down;	phi = CA*180/pi mod (nstorke*180);	if phi > CA_start and phi < CA_start + dCA_total then		CA_VV = phi - CA_start;		if CA_VV <= IndCA_lift_up then			inarr1[InProfNoRow1*2+2] = CA_VV;			lift = dll(dllToolbox, fnc_interp, inarr1);		else 	if CA_VV <= IndCA_lift_up + dCA_lift then					lift = 1;			  	else 	if CA_VV <= IndCA_lift_up + dCA_lift + IndCA_lift_down then							CA_VV = phi - (CA_start + IndCA_lift_up + dCA_lift);							inarr2[InProfNoRow2*2+2] = CA_VV;							lift = dll(dllToolbox, fnc_interp,inarr2);					 	else 					 		lift = 0;							end;				end;		end;	else		lift = 0;		end;				lift = InLift_max*lift; implementation_end;specification_end;	specification 'IntakeLiftVar' description '<Information><Description><Version>4.6</Version><LibraryPath>Components\ValveLift.emx</LibraryPath><IsMainModel>1</IsMainModel><KeepParameterValues>False</KeepParameterValues><TimeStamp>2016-4-1 23:07:16</TimeStamp><AllowLibraryUpdate>False</AllowLibraryUpdate><Configuration><struct><member><name>DocumentationMask</name><value><struct></struct></value></member></struct></Configuration></Description><Attributes><GlobalRelations></GlobalRelations></Attributes></Information>'; type ExhVVLift  ports   signal out lift;   signal in CA;   signal in CA_start_nom;   signal in dCA_lift_nom; end; icon bg bottom  figures   rectangle 267.9 104 340.1 136 color 0 fill 15132390;   text 'VVLift' 304 120 color 0 16;  terminals   lift 304 144 fixed;   CA 328 96 fixed;   CA_start_nom 280 96 fixed;   dCA_lift_nom 304 96 fixed; end; implementation eqparameters	string global dllToolbox;	string global fnc_interp;		integer global InProfNoRow1;	integer global InProfNoRow2;	real global InVVProfUp[InProfNoRow1];	real global InVVProfDown[InProfNoRow1];	real global InLift_max;	real global nStroke;	real global InCA_start_ref; //Reference start CA for start of valve lift	real global IndCA_lift_up;	 //Lift up time (should not be changed unless file is changed	real global IndCA_lift_down; //Lift down time (should not be changed unless file is changed//	real hidden global IndCA_lift_top_ref = 0; //Reference duration for lift upvariables	real inarr1[InProfNoRow1*2+2];							//length should be 2 * no. of row of profile table + 1	real inarr2[InProfNoRow2*2+2];							//length should be 2 * no. of row of profile table + 1	real CA_start, dCA_lift, dCA_total, CA_VV;	real CA_start_cyc;	real dCA_total_ref;	real phi;	integer i;	boolean reset;initialequations	CA_start_cyc = 180*nStroke;	reset = true;	inarr1[1] = InProfNoRow1;	for i = 1 to InProfNoRow1 do		inarr1[i+1] = i / InProfNoRow1;	end;	inarr1[InProfNoRow1+2:InProfNoRow1*2+1] = InVVProfUp;			inarr2[1] = InProfNoRow2;	for i = 1 to InProfNoRow2 do		inarr2[i+1] = i / InProfNoRow2;	end;		inarr2[InProfNoRow2+2:InProfNoRow2*2+1] = InVVProfDown;		dCA_total_ref = IndCA_lift_up + IndCA_lift_down;		equations	CA_start = CA_start_nom*InCA_start_ref;	phi = CA*180/pi mod (nStroke*180);	if phi > CA_start and reset == true then		reset = false;		CA_start_cyc = CA_start;		dCA_total = dCA_total_ref * max([1; dCA_lift_nom]);		dCA_lift = dCA_total - dCA_total_ref;		end;	if phi > CA_start_cyc then		if phi < CA_start_cyc + dCA_total then			CA_VV = (phi - CA_start_cyc)/IndCA_lift_up;			if CA_VV <= 1 then				inarr1[InProfNoRow1*2+2] = CA_VV;				lift = dll(dllToolbox, fnc_interp, inarr1);			else 					CA_VV = (phi - CA_start_cyc)/(IndCA_lift_up + dCA_lift);				if CA_VV <= 1 then					lift = 1;			  	else 						CA_VV = (phi - (CA_start_cyc + IndCA_lift_up + dCA_lift))/IndCA_lift_down;					inarr2[InProfNoRow2*2+2] = CA_VV;					lift = dll(dllToolbox, fnc_interp,inarr2);				end;			end;		else			lift = 0;		end;	else		lift = 0;			if reset == false then			reset = true;			CA_start_cyc = 720;		end;								end;				lift = InLift_max*lift; implementation_end;specification_end;end;]]>
  </Sidops>
</Model>
</Document>
